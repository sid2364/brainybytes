// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: LexicalAnalyzer.flex


@SuppressWarnings("fallthrough")
class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int ASSIGNMENT = 2;
  public static final int IF = 4;
  public static final int WHILE = 6;
  public static final int OUTPUT = 8;
  public static final int INPUT = 10;
  public static final int CONDITION = 12;
  public static final int ARITHMETIC = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\6\0\1\5\1\6\1\7\1\10\1\0\1\11"+
    "\1\0\1\12\1\13\11\14\2\0\1\15\1\16\3\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\21\1\25"+
    "\1\26\2\21\1\27\1\21\1\30\1\31\1\32\1\21"+
    "\1\33\1\34\1\35\1\36\1\21\1\37\3\21\4\0"+
    "\1\21\1\0\32\21\1\40\1\0\1\41\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\7\13\2\14\1\15\1\16"+
    "\2\17\2\1\1\20\1\21\1\1\1\22\1\23\1\24"+
    "\1\25\2\26\1\27\1\1\1\30\2\31\1\10\1\32"+
    "\1\33\1\34\1\35\1\13\1\36\1\37\3\13\3\0"+
    "\1\40\2\33\1\41\1\42\1\43\1\13\3\0\1\13"+
    "\1\44\1\45\1\0\1\46\1\0\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0110\0\u0132\0\u0154\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u0110\0\u0176\0\u0110\0\u0198\0\u01ba\0\u01dc\0\u01fe\0\u0220"+
    "\0\u0242\0\u0264\0\u0286\0\u02a8\0\u0110\0\u02ca\0\u0110\0\u02ec"+
    "\0\u0110\0\u030e\0\u0330\0\u0352\0\u0110\0\u0110\0\u0374\0\u0110"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0396\0\u03b8\0\u01ba\0\u03da"+
    "\0\u0110\0\u03fc\0\u0110\0\u041e\0\u0440\0\u0110\0\u01dc\0\u0462"+
    "\0\u01dc\0\u01dc\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e"+
    "\0\u0110\0\u0110\0\u0550\0\u01dc\0\u01dc\0\u01dc\0\u0572\0\u0594"+
    "\0\u05b6\0\u05d8\0\u05fa\0\u0110\0\u0110\0\u061c\0\u01dc\0\u063e"+
    "\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\11\1\25\1\26\1\27"+
    "\2\26\1\30\2\26\1\31\1\32\1\26\1\33\5\26"+
    "\1\34\15\11\1\35\1\36\1\11\1\37\21\40\3\11"+
    "\2\41\1\42\17\11\1\43\11\11\1\44\2\11\1\45"+
    "\1\46\1\11\2\41\1\42\27\11\1\47\4\11\1\45"+
    "\1\46\5\11\1\50\1\51\40\11\1\52\1\53\34\11"+
    "\2\54\1\55\7\11\1\23\1\24\1\56\1\57\21\60"+
    "\3\11\2\61\1\62\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\63\1\23\1\24\2\11\21\60\2\11\44\0"+
    "\1\12\43\0\1\64\47\0\1\65\42\0\2\24\43\0"+
    "\1\66\36\0\2\26\2\0\21\26\15\0\2\26\2\0"+
    "\4\26\1\67\14\26\15\0\2\26\2\0\11\26\1\70"+
    "\7\26\15\0\2\26\2\0\5\26\1\71\3\26\1\72"+
    "\7\26\15\0\2\26\2\0\4\26\1\73\14\26\15\0"+
    "\2\26\2\0\17\26\1\74\1\26\15\0\2\26\2\0"+
    "\6\26\1\75\12\26\15\0\2\36\40\0\2\40\2\0"+
    "\21\40\4\0\1\41\66\0\1\76\37\0\1\77\37\0"+
    "\1\100\20\0\1\54\55\0\1\101\36\0\2\60\2\0"+
    "\21\60\4\0\1\61\37\0\2\64\1\0\37\64\2\65"+
    "\1\102\1\103\36\65\13\0\2\26\2\0\3\26\1\104"+
    "\15\26\15\0\2\26\2\0\16\26\1\105\2\26\15\0"+
    "\2\26\2\0\16\26\1\106\2\26\15\0\2\26\2\0"+
    "\7\26\1\107\11\26\36\0\1\110\30\0\1\111\50\0"+
    "\1\112\11\0\1\102\52\0\2\26\2\0\10\26\1\113"+
    "\10\26\25\0\1\114\46\0\1\115\34\0\1\116\31\0"+
    "\2\26\2\0\4\26\1\117\14\26\21\0\1\120\57\0"+
    "\1\121\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1632];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contai